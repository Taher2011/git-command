Git Commands :---->
=======================================================================================================================================================================================
Pushing : To push your local Maven repository to GitHub, you'll need to first set up a Git repository, then add and push your project files to GitHub. 

1. Create a GitHub Repository
   Go to GitHub and log in.
   Click on New to create a new repository.
   Name your repository, add a description (optional), and choose whether to make it public or private.
   Click Create repository.

2. Initialize Git in Your Local Maven Project in your local project directory, open a terminal and run the following commands:
 
   # Go to your Maven project directory
   cd /path/to/your/maven/project

   # Initialize a new Git repository
   git init

   # Add the remote repository (replace with your GitHub repository URL)
   git remote add origin https://github.com/username/repository-name.git   

3. Add and Commit Files
 
   # Add all project files to staging
   git add .

   # Commit the files with a message
   git commit -m "Initial commit"   

4. Push to GitHub
  
   # Push the files to the main branch on GitHub
   git push -u origin main   
   
Note1: If you have to specify git pull origin main every time, it’s likely because your local branch is not set to track the remote main branch. 
	   By setting an upstream branch, you can simply use git pull without specifying origin main each time. To set the upstream branch for main, run this command:
	   "git branch --set-upstream-to=origin/main main"
	   After setting this, you should be able to use git pull without any additional arguments. This command establishes a tracking relationship between your local main branch and the remote origin/main branch,
	   so Git knows which branch to pull from by default.
	   
Note2: "fatal: no commit on branch 'main' yet"  means that your local main branch doesn’t have any commits yet, which prevents it from tracking the remote branch. 
	   Here’s how to resolve it:
	   You need to make at least one commit to establish the branch's history.
       Stage and commit any file (e.g., a README file):
	   git add README.md
	   git commit -m "Initial commit"
	   Now you can set the upstream branch: "git branch --set-upstream-to=origin/main main"
	   Then, you can pull from origin main: "git pull origin main --allow-unrelated-histories"
	   
Note3: The error "fatal: refusing to merge unrelated histories" occurs when Git tries to merge two branches that don't share a common commit history. 
	   This can happen if your local repository was initialized separately from the remote repository, and they haven’t been connected before.	   
	   To resolve this, you can allow Git to merge unrelated histories with the --allow-unrelated-histories flag:
	   "git pull origin main --allow-unrelated-histories"
	   This will force Git to merge the two histories, and you might be prompted to resolve any conflicts that arise. 
	   Afterward, you can commit the merge and continue with your work.
=======================================================================================================================================================================================									

git config user.name  :-> returns the current username
=======================================================================================================================================================================================

git config user.email :-> returns the current email
=======================================================================================================================================================================================

git config --global user.name Taher Ali :-> updates the current username
=======================================================================================================================================================================================

to create new file :-> 
touch test.txt
=======================================================================================================================================================================================

to delete file :-> 
rm test.txt
=======================================================================================================================================================================================

to create new folder :-> 
mkdir Test
=======================================================================================================================================================================================

ls -a :->  list all hidden files also
=======================================================================================================================================================================================

git init :-> create new git repo
=======================================================================================================================================================================================

git status :->  shows information on current status of git repo and its content
=======================================================================================================================================================================================

git log :->  shows all history
=======================================================================================================================================================================================

													 
													 |==================|
									  |<==============| Working Directory|
									  |			     |==================|
									  |				 
									  |	
								  |========|  
								  |git add |			 
								  |========|				 
									  |				 
									  |				 
									  |			     |==================|
									  |=============>| Staging   Area   |=============>|
													 |==================|		       |				 
																					   |				 
																					   |																							
																				|===========|  
																				|git commit |			 
																				|===========|			  																						
																					   |
																					   |
																					   |
													 |==================|			   |
													 |     Repository   |<==============
													 |==================|
													 
=======================================================================================================================================================================================
	
git add   :->  add specific files to staging area
git add . :->  add all files to staging area
=======================================================================================================================================================================================

git commit -m "my message" :->   commit all changes to repo from the staging area
	 	         				-m flag allows up to pass an inline commit message
=======================================================================================================================================================================================

git commit --amend :-> suppose we just made commit and then realized we forgot to include a file or maybe we made typo in commit message that we want to correct, 
					   rather than making brand new seprate commit we can redo the previous commit message using the --amend option.

					git commit -m "some commit"
					git add forgotten file
					git commit --amend
=======================================================================================================================================================================================

.gitignore :-> inside file we can write patterns to tell GIT which files and folders to ignore
			    a) .DS_Store will ignore files named .DS_Store
				b) folderName/ will ignore an entire directory
				c) *.log will ignore any files with the .log extension
=======================================================================================================================================================================================

HEAD : HEAD is simply pointer that refers to the current "location" in your repo. 
	   HEAD points to particular branch reference.
	   HEAD always points to the latest commit you made on branch.
=======================================================================================================================================================================================

git branch :->  • to view existing branches in your repo.
				• '*' indicates which branch you are currently on.
=======================================================================================================================================================================================

git branch <branch-name> :-> • to make a new branch based upon current head.
							 • this just creates the branch and it does not switch you to that branch.
=======================================================================================================================================================================================

git switch <branch-name> :-> to switch to specific branch.
git checkout <branch-name> :-> to switch to specific branch.

note : both are same
=======================================================================================================================================================================================

git switch -c <branch-name> :-> • to make a new branch based upon current head.
							    • this just not only creates the branch also it does switch you to that branch.
=======================================================================================================================================================================================

git branch -d <branch-name> :-> • to delete a branch.
=======================================================================================================================================================================================

git branch -m <branch-name> :-> • to rename a branch.
=======================================================================================================================================================================================

Three type of merge : 1) Fast Forward
					  2) Merge Commit(No Conflicts)
					  3) Conflicts

git merge :-> to merge bugfix branch into master.
			  Switch to or checkout the branch you want to merge the changes into(receving branch)
			  Use git merge command to merge the changes from specific branch into the current branch
			  For example :-> To merge the bugfix branch into main branch
			  > git switch main
			  > git merge bugfix
=======================================================================================================================================================================================

Resolving conflicts : 1) Open up the file with merge conflicts.
					  2) Edit the files to remove the conflicts. Decide which branchs content you want to keep in each conflict or keep the content from both.
					  3) Remove the conflict markers in the file.
					  4) Add your changes and then make commit.

Step 1: Clone the repository or update your local repository with the latest changes.
git pull origin main


Step 2: Switch to the head branch of the pull request.
git fetch origin
git checkout bugfix


Step 3: Merge the base branch into the head branch.
git merge main


Step 4: Fix the conflicts and commit the result.
See Resolving a merge conflict using the command line for step-by-step instructions on resolving merge conflicts.


Step 5: Stage the changes.
git add


Step 6: Commit the changes.
git commit -m "resolve conflicts"


Step 7: Push the changes.
git push -u origin bugfix

			  
Note : Content from the branch you are trying to merge from is displayed between the ======= and >>>>> symbols

=======================================================================================================================================================================================

git reset <file-name(s)> :-> remove the file from staging area back to working directory.
=======================================================================================================================================================================================
Git Diff:

viewing unstaged changes :
git diff :-> lists all the changes in working directory that are not staged for commit.
		     compares staging area and working directory files.

viewing staged changes :
git diff --staged :-> lists all the changes in working directory that are staged for commit.
					  shows all what will be included in my commit if I run git commit.
			 
viewing unstaged and staged changes :
git diff HEAD :-> lists all the changes in working directory since your last commit.

comparing branches :
git diff branch1 branch2	

comparing commits :
git diff commit1 commit2
=======================================================================================================================================================================================
	
Git Stash:
I do some new work on bugfix branch but don’t make any commits. What happen when I switch back to main branch?
Then possibly 2 things may happen:
1)	My changes come with me to the destination branch.
2)	Git won’t let me switch if it detects potential conflicts.

Stashing : Git provides an easy way of stashing these uncommitted changes so that we can return to them later, without having to make unnecessary commits.

git stash :-> is useful command that helps you save changes that you are not ready yet to commit. You can stash changes and then come back to them later.
Running git stash will take all uncommitted changes (staged and unstaged) and stash them, reverting changes in your working copy.

git stash pop :-> to remove the most recently stashed changes in your stash and re-apply them to your working copy.

git stash apply :-> to apply whatever is stashed away, without removing it from the stash. This can be useful if you want to apply stashed changes to multiple branches.

git stash list :-> list all the stashed changes from stash stack.

git stash clear :-> clear out all the stashes.
=======================================================================================================================================================================================

We can use git checkout commit <commit-id> to view previous commit. 

Usually, HEAD points to a specific branch reference rather than particular commit.
How it works?
•	HEAD is pointer to current branch reference.
•	The branch reference is pointer to the last commit made on particular branch.

When we checkout a particular commit, HEAD points at that commit rather than at the branch reference.
=======================================================================================================================================================================================

Unmodifying files with Restore : 

Discarding changes :
• Suppose you have made some changes to a file but dont want to keep them. To revert the file back to whatever it looked like when you last committed, you can use below :
git checkout HEAD <file-name>  :-> to discard any changes in that file , reverting back to HEAD.		

Git	Restore:
git restore <file-name> :-> • git restore helps with undoing operations.
							• Suppose you have made some changes to a file since your last commit, you have saved the file but then realize we don’t want those changes anymore. 
							  To restore the file to the contents in the HEAD, we can use git restore <file-name>
							
both are same							
1) git checkout HEAD <file-name>
2) git restore <file-name>

Unstaging files with Restore :
• git restore --staged <filename> :-> to unstage from stagging area
• git restore <filename> :-> to discard changes in working directory if not staged i.e not add
=======================================================================================================================================================================================

Undoing commits with Reset :

1) Plain Reset :
•  Suppose you have just made a couple of commits on the main branch , but you actually meant to make them on seprate branch instead. To undo those commits, you can use below :
   git reset <commit-hash> :-> will delete and reset repo back to a specific commit. The commits are gone but associated changes will be remain in working directory.

2) Hard Reset :
•  If you want to undo both the commits and actual changes in your files, you can use below :
   git reset --hard <commit-hash> :-> will delete and reset repo back to a last commit and associated changes from working directory.
=======================================================================================================================================================================================

Reverting commits with Git Revert :
• git revert is similar to git reset, both undo changes but they accomplish it in different ways.
	• git reset actaully moves the branch pointer backwards, eliminating commits.
	• git revert instead creates a brand new commit which reverses/undo the changes from commit, because it results in new commit, you will be prompted to enter a commit message.
	
Which one to use ?
• Both helps us reverses/undo changes, but there is significant difference when it comes to collaboration.
• If you want to reverse some commits that other people already  have on their machines, yet should use revert.
• If you want to reverse commits that you haven't shared with others, use reset.
	
git revert :-> creates a brand new commit which reverses/undo the changes from commit, because it results in new commit.

git revert <commitId>
=======================================================================================================================================================================================

Remotes :
	Option 1:
	Existing Repo locally : If you have already an existing repo locally that you want to get on Github
							• Create a new repo on GitHub.
							• Connect your local repo(add a remote).
							• Push up your changes to GitHub.
    
    Option 2:
	Existing Repo remote :  If you have already an existing repo remotely that you want to get on local machine
							• Create a new repo on GitHub.
							• Clone it down to your local.
							• Do some work.
							• Push up your changes to GitHub.	
					
	Remote : • Before we can push anything to Github, we need to tell Git about our remote repo on Github.
			 • We need to setup a destination to push up to.
			 • In Git, 'remotes' are referred as 'destinations'.
			 • Each remote is simply a URL where a hosted repo lives.
	
	Viewing Remotes : To view any existing remotes for your repo, we can run below :
	git remote or git remote -v :-> displays a list of remotes
			 
	Adding Remotes : To add new remote,  we can run below :
	git remote add <name> <url> :-> add remotes
	
=======================================================================================================================================================================================


Remote Branches :
git branch -r :-> to view the remote branches our local repo knows about.

example :
run "git branch -r" and it gives below :
origin/HEAD -> origin/main
origin/main

=======================================================================================================================================================================================

Fetching :
• It allows us to download changes from a remote repo, but these changes will not be automatically integrated in to our working files.
• It lets you see what others have been working on, without having to merge those changes into our local repo.

git fetch <remote-name> :-> • fetches branches and history from specific remote repo.
							• it only updates remote tracking branches.

example :
git fetch origin :-> fetch all changes from origin remote repo.
=======================================================================================================================================================================================				

Pulling :
• It is used to retrieve changes from remote repo.
• Unlike fetch, pull actually updates our HEAD branch with whatever changes are retrieved from remote.

git pull                =                         git fetch                               +                             git merge
										   update the remote tracking branch                                   update my current branch with
										   with latest changes from remote                                     whatever changes are on the remote
										   repo.                                                               tracking branch.

git pull <remote> <branch> :-> would fetch the latest code from remote branch and merge those changes into our current branch.		

example :
git pull origin main  :-> would fetch the latest code from origin's main branch and merge those changes into our current main branch.										   
=======================================================================================================================================================================================

            git fetch                                    git pull
• Gets changes from remote branch.         • Get changes from remote branch.
• Updates the remote tracking branches     • Updates the current branch with the
  with new changes.                          the new changes, merging them in.
• Does not merge changes onto your current • Can results in merge conflicts.
  HEAD branch.
=======================================================================================================================================================================================  
 
